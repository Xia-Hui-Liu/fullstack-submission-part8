{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n  return function (message) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    fn.apply(void 0, __spreadArray([typeof message === \"number\" ? getErrorMsg(message) : message], args, false));\n  };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (!condition) {\n    originalInvariant(condition, getErrorMsg(message, args));\n  }\n}, {\n  debug: wrap(originalInvariant.debug),\n  log: wrap(originalInvariant.log),\n  warn: wrap(originalInvariant.warn),\n  error: wrap(originalInvariant.error)\n});\nfunction newInvariantError(message) {\n  var optionalParams = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    optionalParams[_i - 1] = arguments[_i];\n  }\n  return new InvariantError(getErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction getErrorMsg(message, messageArgs) {\n  if (messageArgs === void 0) {\n    messageArgs = [];\n  }\n  if (!message) return;\n  var args = messageArgs.map(function (arg) {\n    return typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000);\n  });\n  return global[ApolloErrorMessageHandler] && global[ApolloErrorMessageHandler](message, args) || \"An error occured! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n    version: version,\n    message: message,\n    args: args\n  })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,IAAIC,iBAAiB,EAAEC,cAAc,QAAQ,cAAc;AAC7E,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,MAAM,MAAM,aAAa;AAEhC,SAASC,mBAAmB,QAAQ,kCAAkC;AAEtE,SAASC,IAAI,CAACC,EAA0C;EACtD,OAAO,UAAUC,OAAwB;IAAE;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACzCH,EAAE,8BAAC,OAAOC,OAAO,KAAK,QAAQ,GAAGG,WAAW,CAACH,OAAO,CAAC,GAAGA,OAAO,GAAKE,IAAI;EAC1E,CAAC;AACH;AAgDA,IAAMV,SAAS,GAAqBY,MAAM,CAACC,MAAM,CAC/C,SAASb,SAAS,CAChBc,SAAc,EACdN,OAAyB;EACzB;OAAA,UAAkB,EAAlBC,qBAAkB,EAAlBA,IAAkB;IAAlBC;;EAEA,IAAI,CAACI,SAAS,EAAE;IACdb,iBAAiB,CAACa,SAAS,EAAEH,WAAW,CAACH,OAAO,EAAEE,IAAI,CAAC,CAAC;;AAE5D,CAAC,EACD;EACEK,KAAK,EAAET,IAAI,CAACL,iBAAiB,CAACc,KAAK,CAAC;EACpCC,GAAG,EAAEV,IAAI,CAACL,iBAAiB,CAACe,GAAG,CAAC;EAChCC,IAAI,EAAEX,IAAI,CAACL,iBAAiB,CAACgB,IAAI,CAAC;EAClCC,KAAK,EAAEZ,IAAI,CAACL,iBAAiB,CAACiB,KAAK;CACpC,CACF;AAYD,SAASC,iBAAiB,CACxBX,OAAyB;EACzB;OAAA,UAA4B,EAA5BC,qBAA4B,EAA5BA,IAA4B;IAA5BW;;EAEA,OAAO,IAAIlB,cAAc,CAACS,WAAW,CAACH,OAAO,EAAEY,cAAc,CAAC,CAAC;AACjE;AAEA,IAAMC,yBAAyB,GAAGC,MAAM,CAACC,GAAG,CAC1C,4BAA4B,GAAGpB,OAAO,CACvC;AASD,SAASQ,WAAW,CAACH,OAAyB,EAAEgB,WAA2B;EAA3B;IAAAA,gBAA2B;EAAA;EACzE,IAAI,CAAChB,OAAO,EAAE;EACd,IAAME,IAAI,GAAGc,WAAW,CAACC,GAAG,CAAC,UAACC,GAAG;IAC/B,cAAOA,GAAG,IAAI,QAAQ,GAAGA,GAAG,GAAGrB,mBAAmB,CAACqB,GAAG,EAAE,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;EAAzE,CAAyE,CAC1E;EACD,OACGvB,MAAM,CAACiB,yBAAyB,CAAC,IAChCjB,MAAM,CAACiB,yBAAyB,CAAC,CAACb,OAAO,EAAEE,IAAI,CAAC,IAClD,qGAA8FkB,kBAAkB,CAC9GC,IAAI,CAACC,SAAS,CAAC;IACb3B,OAAO;IACPK,OAAO;IACPE,IAAI;GACL,CAAC,CACH,CAAE;AAEP;AAEA,SACEV,SAAS,EACTE,cAAc,EACdiB,iBAAiB,EACjBE,yBAAyB","names":["invariant","originalInvariant","InvariantError","version","global","stringifyForDisplay","wrap","fn","message","_i","args","getErrorMsg","Object","assign","condition","debug","log","warn","error","newInvariantError","optionalParams","ApolloErrorMessageHandler","Symbol","for","messageArgs","map","arg","slice","encodeURIComponent","JSON","stringify"],"sources":["/Users/xiahuiliu/Documents/fullstack-submission-part8/library-frontend/node_modules/@apollo/src/utilities/globals/invariantWrappers.ts"],"sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn: (msg?: string, ...args: any[]) => void) {\n  return function (message: string | number, ...args: any[]) {\n    fn(typeof message === \"number\" ? getErrorMsg(message) : message, ...args);\n  };\n}\n\ntype LogFunction = {\n  /**\n   * Logs a `$level` message if the user used `ts-invariant`'s `setVerbosity` to set\n   * a verbosity level of `$level` or lower. (defaults to `\"log\"`).\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadDevMessages` to add the message strings to the bundle.\n   * The documentation will display the message without argument substitution.\n   * Instead, the arguments will be printed on the console after the link.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * String substitutions like %s, %o, %d or %f are supported.\n   */\n  (message?: any, ...optionalParams: unknown[]): void;\n};\n\ntype WrappedInvariant = {\n  /**\n   * Throws and InvariantError with the given message if the condition is false.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadErrorMessages` to add the message strings to the bundle.\n   * The documentation will display the message with the arguments substituted.\n   *\n   * String substitutions with %s are supported and will also return\n   * pretty-stringified objects.\n   * Excess `optionalParams` will be swallowed.\n   */\n  (\n    condition: any,\n    message?: string | number,\n    ...optionalParams: unknown[]\n  ): asserts condition;\n\n  debug: LogFunction;\n  log: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n};\nconst invariant: WrappedInvariant = Object.assign(\n  function invariant(\n    condition: any,\n    message?: string | number,\n    ...args: unknown[]\n  ): asserts condition {\n    if (!condition) {\n      originalInvariant(condition, getErrorMsg(message, args));\n    }\n  },\n  {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n  }\n);\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(getErrorMsg(message, optionalParams));\n}\n\nconst ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: unknown[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction getErrorMsg(message?: string | number, messageArgs: unknown[] = []) {\n  if (!message) return;\n  const args = messageArgs.map((arg) =>\n    typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000)\n  );\n  return (\n    (global[ApolloErrorMessageHandler] &&\n      global[ApolloErrorMessageHandler](message, args)) ||\n    `An error occured! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n      JSON.stringify({\n        version,\n        message,\n        args,\n      })\n    )}`\n  );\n}\n\nexport {\n  invariant,\n  InvariantError,\n  newInvariantError,\n  ApolloErrorMessageHandler,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}