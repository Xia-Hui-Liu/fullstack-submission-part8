{"ast":null,"code":"import * as React from \"react\";\nimport { unwrapQueryRef } from \"../cache/QueryReference.js\";\nimport { __use } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useReadQuery(queryRef) {\n  var internalQueryRef = unwrapQueryRef(queryRef);\n  invariant(internalQueryRef.promiseCache, 49);\n  var promiseCache = internalQueryRef.promiseCache,\n    key = internalQueryRef.key;\n  if (!promiseCache.has(key)) {\n    promiseCache.set(key, internalQueryRef.promise);\n  }\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      internalQueryRef.promiseCache.set(internalQueryRef.key, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef]), function () {\n    return promiseCache.get(key);\n  }, function () {\n    return promiseCache.get(key);\n  });\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACEC,cAAc,QAET,4BAA4B;AACnC,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,oBAAoB,QAAQ,2BAA2B;AAEhE,OAAM,SAAUC,YAAY,CAAQC,QAA+B;EACjE,IAAMC,gBAAgB,GAAGP,cAAc,CAACM,QAAQ,CAAC;EACjDH,SAAS,CACPI,gBAAgB,CAACC,YAAY,EAC7B;MACEA;IAAAC,0BAAsE;MACtE;IAGID,YAAY,IAAU,sBAAgB,QAAxB;EAEtB;MACEE,8BAAsB,kBAA0B;IACjD;MAEKH,gBAAU,aACd,IAAM,iBACJ,MAACG;MACCC,WAAO;;sBAEM,CAAE,CAAC;IAAA;EAAA;IAAA;EAAA;MAChBC,MAAG;EACL,OACCb,aAAgB,CAAC,YAEpB;IAII,OAAM;MAELc,IAAK,EAACD,MAAO,CAACC;MACnBC,aAAO;MACLC,KAAI,EAAEb,aAAW;;YAEjB","names":["React","unwrapQueryRef","__use","toApolloError","invariant","useSyncExternalStore","useReadQuery","queryRef","internalQueryRef","promiseCache","key","promise","forceUpdate","result","data","networkStatus","error"],"sources":["/Users/xiahuiliu/Documents/fullstack-submission-8/library-frontend/node_modules/@apollo/src/react/hooks/useReadQuery.ts"],"sourcesContent":["import * as React from \"react\";\nimport {\n  unwrapQueryRef,\n  type QueryReference,\n} from \"../cache/QueryReference.js\";\nimport { __use } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\nexport function useReadQuery<TData>(queryRef: QueryReference<TData>) {\n  const internalQueryRef = unwrapQueryRef(queryRef);\n  invariant(\n    internalQueryRef.promiseCache,\n    \"It appears that `useReadQuery` was used outside of `useBackgroundQuery`. \" +\n      \"`useReadQuery` is only supported for use with `useBackgroundQuery`. \" +\n      \"Please ensure you are passing the `queryRef` returned from `useBackgroundQuery`.\"\n  );\n\n  const { promiseCache, key } = internalQueryRef;\n\n  if (!promiseCache.has(key)) {\n    promiseCache.set(key, internalQueryRef.promise);\n  }\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          internalQueryRef.promiseCache!.set(internalQueryRef.key, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef]\n    ),\n    () => promiseCache.get(key)!,\n    () => promiseCache.get(key)!\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}