{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from '../utilities/globals/index.js';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition } from '../utilities/index.js';\nimport { equalByQuery } from './equalByQuery.js';\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (skipCacheDataFor(fetchPolicy) || this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {} else if (this.waitForOwnResult) {\n      this.queryInfo['updateWatch']();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !equalByQuery(this.query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(18, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        globalThis.__DEV__ !== false && invariant.error(19, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](this.queryId, options, newNetworkStatus);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    invariant(pollInterval, 20);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n      ;\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var error = this.getLastError();\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    var fetchOptions = query === options.query ? options : __assign(__assign({}, options), {\n      query: query\n    });\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(fetchOptions.fetchPolicy));\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = fetchOptions.variables && __assign({}, fetchOptions.variables);\n    var _a = this.fetch(fetchOptions, newNetworkStatus),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function (result) {\n        finishWaitingForOwnResult();\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        finishWaitingForOwnResult();\n        _this.reportError(error, variables);\n      }\n    };\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(21, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(22, missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","equalByQuery","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","_super","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","defaultOptions","_c","_d","defaultFetchPolicy","_f","initialFetchPolicy","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","lastQuery","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","__assign","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","globalThis","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","resultIsDifferent","hasNonreactiveDirective","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","__DEV__","queryDef","vars","variableDefinitions","some","variable","fetchMoreOptions","combinedOptions","originalNetworkStatus","observe","qid","cache","optimistic","fetchMoreResult","onWatchUpdated","watch","updatedQuerySet","finally","reobserveCacheFirst","startGraphQLSubscription","subscriptionData","updateQuery","subscriptions","newOptions","mergedOptions","mapFn","updatePolling","_b","nextFetchPolicy","reason","observable","pollingInfo","clearTimeout","poll","info","prototype","useDisposableConcast","newNetworkStatus","oldVariables","oldFetchPolicy","assign","setVariables","finishWaitingForOwnResult","fetch","concast","fromLink","reportResult","getCurrentResult","lastError","isDifferent","errors","errorResult","stopPolling","obsQuery"],"sources":["/Users/xiahuiliu/Documents/fullstack-submission-part8/library-frontend/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals/index.js';\nimport type { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription} from '../utilities/index.js';\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities/index.js';\nimport type { ApolloError } from '../errors/index.js';\nimport type { QueryManager } from './QueryManager.js';\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types.js';\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions.js';\nimport type { QueryInfo } from './QueryInfo.js';\nimport type { MissingFieldError } from '../cache/index.js';\nimport type { MissingTree } from '../cache/core/types/common.js';\nimport { equalByQuery } from './equalByQuery.js';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through. \n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`. \n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo['updateWatch']();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const resultIsDifferent =\n      this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective\n        ? !equalByQuery(\n            this.query,\n            this.last.result,\n            newResult,\n            this.variables,\n          )\n        : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.options.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query\n      ? this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = {\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    };\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    // If the transform doesn't change the document, leave `options` alone and\n    // use the original object.\n    const fetchOptions = query === options.query ? options : { ...options, query };\n\n    this.waitForOwnResult &&= skipCacheDataFor(fetchOptions.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n    \n    const variables = fetchOptions.variables && { ...fetchOptions.variables };\n    const { concast, fromLink } = this.fetch(fetchOptions, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        finishWaitingForOwnResult();\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        finishWaitingForOwnResult();\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}